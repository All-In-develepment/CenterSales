@page "/projectweight/edit/{id:guid}"
@using Domain
@using ClientBlazor.Services
@inject ProjectService projectService
@inject ProjectWeightServices projectWeightServices
@inject NavigationManager navigationManager

<h3>Editar Peso de Projeto</h3>

@if (projectWeightModel == null)
{
  <p>Carregando...</p>
}
else
{
  <EditForm Model="@projectWeightModel" OnValidSubmit="HandleUpdateProjectWeight">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
      <label>Projeto</label>
      <InputSelect @bind-Value="projectWeightModel.ProjectId" class="form-control">
        <option value="">Selecione um projeto</option>
        @foreach (var project in projects)
        {
          <option value="@project.ProjectId">@project.ProjectName</option>
        }
      </InputSelect>
    </div>
    <div class="form-group">
      <label>Mês</label>
      <InputDate @bind-Value="projectWeightModel.Month" class="form-control" />
    </div>
    <div class="form-group">
      <label>Peso da conversão</label>
      <InputNumber @bind-Value="projectWeightModel.ConversionWeight" class="form-control" />
    </div>
    <div class="form-group">
      <label>Peso do deposito</label>
      <InputNumber @bind-Value="projectWeightModel.DepositWeight" class="form-control" />
    </div>
    <div class="form-group">
      <label>Peso da venda</label>
      <InputNumber @bind-Value="projectWeightModel.SalesValueWeight" class="form-control" />
    </div>
    <div class="form-group">
      <label>Peso Cadastro</label>
      <InputNumber @bind-Value="projectWeightModel.RegistrationWeight" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Salvar</button>
  </EditForm>

  @if (!string.IsNullOrEmpty(errorMessage))
  {
    <div class="alert alert-danger">@errorMessage</div>
  }
}

@code {
  [Parameter]
  public Guid Id { get; set; }

  private ProjectWeight? projectWeightModel;
  private string? errorMessage;
  private List<Project> projects = new List<Project>();

  protected override async Task OnInitializedAsync()
  {
    projectWeightModel = await projectWeightServices.GetProjectWeightByIdAsync(Id);
    projects = await projectService.GetActiveProjectsAsync();
  }

  private async Task HandleUpdateProjectWeight()
  {
    if (projectWeightModel == null)
    {
      errorMessage = "Peso de projeto não encontrado.";
      return;
    }
    await projectWeightServices.UpdateProjectWeightAsync(Id, projectWeightModel);
    navigationManager.NavigateTo("/projectweight");
  }
}