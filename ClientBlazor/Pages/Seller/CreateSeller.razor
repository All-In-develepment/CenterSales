@page "/sellers/create"
@using Domain
@using ClientBlazor.Services
@inject SellerService sellerService
@inject ProjectService projectService
@inject NavigationManager navigationManager

<h3>Cadastrar Vendedor</h3>

<EditForm Model="@sellerModel" OnValidSubmit="HandleCreateSeller">
  <DataAnnotationsValidator />
  <ValidationSummary />

  <div class="form-group">
    <label>Nome do Vendedor</label>
    <InputText @bind-Value="sellerModel.SellerName" class="form-control" />
  </div>
  @* Campo dropdown com os projetos cadastrados *@
  <div class="form-group">
    <label>Projeto</label>
    <InputSelect @bind-Value="sellerModel.ProjectId" class="form-control">
      <option value="">Selecione um projeto</option>
      @foreach (var project in projects)
      {
        <option value="@project.ProjectId">@project.ProjectName</option>
      } 
    </InputSelect>
  </div>
  <div class="form-group">
    <label>Status</label>
    <InputCheckbox @bind-Value="sellerModel.SellerIsActive" />
    <label for="sellerStatus">Ativo</label>
  </div>
  <button type="submit" class="btn btn-primary">Cadastrar Vendedor</button>
</EditForm>

@if (!string.IsNullOrEmpty(successMessage))
{
  <div class="alert alert-success">@successMessage</div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
  <div class="alert alert-danger">@errorMessage</div>
}

@code {
  private Seller sellerModel = new Seller();
  private string successMessage = string.Empty;
  private string errorMessage = string.Empty;

  private async Task HandleCreateSeller()
  {
    try
    {
      bool isSuccess = await sellerService.CreateSellerAsync(sellerModel);

      if (isSuccess)
      {
        successMessage = "Vendedor cadastrado com sucesso!";
        // Redirecionar para outra página se necessário
        navigationManager.NavigateTo("/sellers");
      }
      else
      {
        errorMessage = "Falha ao cadastrar o vendedor. Tente novamente.";
      }
    }
    catch (Exception ex)
    {
      errorMessage = $"Ocorreu um erro: {ex.Message}";
    }
  }

  private List<Project> projects = new List<Project>();
  protected override async Task OnInitializedAsync()
  {
    projects = await projectService.GetActiveProjectsAsync();
  }
}