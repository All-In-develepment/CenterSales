@page "/sellers/edit/{id:guid}"
@using Domain
@using ClientBlazor.Services
@inject SellerService sellerService
@inject NavigationManager navigationManager

<h3>Editar Vendedor</h3>

@if (seller == null)
{
  <p>Carregando...</p>
}
else
{
  <EditForm Model="@seller" OnValidSubmit="HandleUpdateSeller">
  <DataAnnotationsValidator />
  <ValidationSummary />

  <div class="form-group">
    <label>Nome do Vendedor</label>
    <InputText @bind-Value="seller.SellerName" class="form-control" />
  </div>
  <div class="form-group">
    <label>Status</label>
    <InputCheckbox @bind-Value="seller.SellerIsActive" />
    <label for="sellerStatus">Ativo</label>
  </div>
  <button type="submit" class="btn btn-primary">Salvar</button>
</EditForm>
  
  @if (!string.IsNullOrEmpty(errorMessage))
  {
    <div class="alert alert-danger">@errorMessage</div>
  }
  
}

@code {
  [Parameter]
  public Guid Id { get; set; }

  private Seller? seller;
  private string? errorMessage;

  protected override async Task OnInitializedAsync()
  {
    try
    {
      seller = await sellerService.GetSellerByIdAsync(Id);
    }
    catch (Exception ex)
    {
      errorMessage = "Erro ao carregar o vendedor: " + ex.Message;
    }
  }

  private async Task HandleUpdateSeller()
  {
    try
    {
      if (seller != null)
      {
        await sellerService.UpdateSellerAsync(Id, seller);
        navigationManager.NavigateTo("/sellers");
      }
    }
    catch (Exception ex)
    {
      errorMessage = "Erro ao atualizar o vendedor: " + ex.Message;
    }
  }
}